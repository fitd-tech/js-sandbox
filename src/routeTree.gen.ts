/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SortRouteImport } from './routes/sort'
import { Route as HeapRouteImport } from './routes/heap'
import { Route as IndexRouteImport } from './routes/index'

const SortRoute = SortRouteImport.update({
  id: '/sort',
  path: '/sort',
  getParentRoute: () => rootRouteImport,
} as any)
const HeapRoute = HeapRouteImport.update({
  id: '/heap',
  path: '/heap',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/heap': typeof HeapRoute
  '/sort': typeof SortRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/heap': typeof HeapRoute
  '/sort': typeof SortRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/heap': typeof HeapRoute
  '/sort': typeof SortRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/heap' | '/sort'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/heap' | '/sort'
  id: '__root__' | '/' | '/heap' | '/sort'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HeapRoute: typeof HeapRoute
  SortRoute: typeof SortRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sort': {
      id: '/sort'
      path: '/sort'
      fullPath: '/sort'
      preLoaderRoute: typeof SortRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/heap': {
      id: '/heap'
      path: '/heap'
      fullPath: '/heap'
      preLoaderRoute: typeof HeapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HeapRoute: HeapRoute,
  SortRoute: SortRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
